non_normal <- runif(10)
non_normal
dist(non_normal)
hist(non_normal)
shapiro.test(non_normal)
non_normal <- runif(10)
shapiro.test(non_normal)
hist(non_normal)
non_normal <- replicate(1000, shapiro.test(runif(10))$p.value)
rowMeans(non_normal<0.05)
non_normal<0.05
sum(non_normal<0.05)
sum(non_normal<0.05)/1000
non_normal <- replicate(5000, shapiro.test(runif(10))$p.value)
sum(non_normal<0.05)/1000
sum(non_normal<0.05)/5000
non_normal <- replicate(5000, shapiro.test(runif(10))$p.value)
sum(non_normal<0.05)/length(non_normal)
normal <- rnorm(5000, 0, 1) + runif(5000, 1, 2)
normal <- replicate(rnorm(5000, 0, 1))# + runif(5000, 1, 2)
normal <- replicate(5000, rnorm(5000, 0, 1))# + runif(5000, 1, 2)
normal <- replicate(5000, shapiro.test(rnorm(5000, 0, 1))$p.value)# + runif(5000, 1, 2)
sum(normal<0.05)/length(normal)
sum(non_normal<0.05)/length(non_normal) * 100
sum(normal<0.05)/length(normal) * 100
sum(non_normal>0.05)/length(non_normal) * 100 # percent of times non-normal data is considered normal
sum(normal<0.05)/length(normal) * 100 # percent of times normal data is considered non-normal
install.packages("leaps")
install.packages("xlsx")
install.packages("rJava")
install.packages("xlsx")
library(xlsx)
library(rJava)
install.packages("rJava")
library(xlsx)
library(rJava)
Sys.getenv("JAVA_HOME")
install.packages("QuantPsyc")
install.packages('lawstat')
library(lawstat) # levene.test and runs.test need this
par(mfrow=c(2,1))
plot(BJsales)
BJ2 <- diff(diff(BJsales))
plot(BJ2)
# Fit the ARMA(1,2) model and extract the residuals
m <- arima(BJ2, order = c(1,0,2))
e <- m$residuals # residuals
r <- e/sqrt(m$sigma2) # standardized residuals
par(mfrow=c(2,1))
plot(e, main="Residuals vs t", ylab="")
abline(h=0, col="red")
plot(r, main="Standardized Residuals vs t", ylab="")
abline(h=0, col="red")
# test whether residuals have zero mean
t.test(e)
# test for heteroscedasticity
par(mfrow=c(1,1))
plot(e, main="Residuals vs t", ylab="")
abline(v=c(37,74,111), lwd=3, col="red")
group <- c(rep(1,37),rep(2,37),rep(3,37),rep(4,37))
levene.test(e,group) #Levene
bartlett.test(e,group) #Bartlett
# test for uncorrelatedness / randomness
tsdiag(m) #ACF and Ljung-Box test all in one!
runs.test(e) #Runs test for randomness
# test for normality
par(mfrow=c(1,1))
qqnorm(e, main="QQ-plot of Residuals")
qqline(e)
shapiro.test(e) #SW test
#######################
## ACF-PACF Examples ##
#######################
# MA(1) with n = 200
par(mfcol=c(3,1))
data.sim <- arima.sim(n = 200, list(ma = c(0.7)), sd = sqrt(1))
plot(data.sim, main="Simulated Data from an MA(1) Process")
acf(data.sim, main = "")
pacf(data.sim, main = "")
# or: acf(data.sim, type="partial")
# MA(1) with n = 1000
par(mfcol=c(3,1))
data.sim <- arima.sim(n = 1000, list(ma = c(0.7)), sd = sqrt(1))
plot(data.sim, main="Simulated Data from an MA(1) Process")
acf(data.sim, main = "")
pacf(data.sim, main = "")
# MA(2) with n = 200
par(mfcol=c(3,1))
data.sim <- arima.sim(n = 200, list(ma = c(0.7,-1)), sd = sqrt(1))
plot(data.sim, main="Simulated Data from an MA(2) Process")
acf(data.sim, main = "")
pacf(data.sim, main = "")
# MA(3) with n = 200
par(mfcol=c(3,1))
data.sim <- arima.sim(n = 200, list(ma = c(1,1,1)), sd = sqrt(1))
plot(data.sim, main="Simulated Data from an MA(3) Process")
acf(data.sim, main = "")
pacf(data.sim, main = "")
# AR(1) with n = 200
par(mfcol=c(3,1))
data.sim <- arima.sim(n = 200, list(ar = c(0.7)), sd = sqrt(1))
plot(data.sim, main="Simulated Data from an AR(1) Process")
acf(data.sim, main = "")
pacf(data.sim, main = "")
# AR(1) with n = 1000
par(mfcol=c(3,1))
data.sim <- arima.sim(n = 1000, list(ar = c(0.7)), sd = sqrt(1))
plot(data.sim, main="Simulated Data from an AR(1) Process")
acf(data.sim, main = "")
pacf(data.sim, main = "")
# AR(2) with n = 200
par(mfcol=c(3,1))
data.sim <- arima.sim(n =200, list(ar = c(-0.7, 0.1)), sd = sqrt(1))
plot(data.sim, main="Simulated Data from an AR(2) Process")
acf(data.sim, main = "")
pacf(data.sim, main = "")
# AR(4) with n = 200
par(mfcol=c(3,1))
data.sim <- arima.sim(n = 200, list(ar = c(0.7, 0.1, -0.2, 0.1)), sd = sqrt(1))
plot(data.sim, main="Simulated Data from an AR(4) Process")
acf(data.sim, main = "")
pacf(data.sim, main = "")
# ARMA(1,1) with n = 200
par(mfcol=c(3,1))
data.sim <- arima.sim(n = 200, list(ar=c(0.5) , ma = c(1)), sd = sqrt(1))
plot(data.sim, main="Simulated Data from an ARMA(1,1) Process")
acf(data.sim, main = "")
pacf(data.sim, main = "")
# ARMA(2,1) with n = 200
par(mfcol=c(3,1))
data.sim <- arima.sim(n = 200, list(ar=c(0.3,0.65) , ma = c(-0.5)), sd = sqrt(1))
plot(data.sim, main="Simulated Data from an ARMA(2,1) Process")
acf(data.sim, main = "")
pacf(data.sim, main = "")
#ARMA Fitting Example
#Use the BJsales data. Note that we have to assume the underlying time series is stationary,
#which this clearly not (check this:)
par(mfrow=c(2,1))
plot(BJsales)
#Instead we'll use the twice-differenced version of this time series. More discussion of the
#idea behind this differencing to come.
BJ2 <- diff(diff(BJsales))
plot(BJ2)
#Step 1 in the Box-Jenkins process is "Identification" (i.e., order identification).
#We will use ACF and PACF plots to help us decide what p and q are
acf(BJ2)
pacf(BJ2)
acf(BJ2, type="partial")
pacf(BJ2)
acf(BJ2)
pacf(BJ2)
fit.ar <- arima(BJ2, order=c(3,0,0)) #AR(3)
fit.ar
fit.ma <- arima(BJ2, order=c(0,0,1)) #MA(1)
fit.ma
fit.arma <- arima(BJ2, order=c(3,0,1)) #ARMA(3,1)
fit.arma
anova(fit.ma, fit.arma)
fitls.ar <- arima(BJ2, order=c(3,0,0), method="CSS") #AR(3)
fitls.ar
fitls.ma <- arima(BJ2, order=c(0,0,1), method="CSS") #MA(1)
fitls.ma
fitls.arma <- arima(BJ2, order=c(3,0,1), method="CSS") #ARMA(3,1)
fitls.arma
#We can fit any number of models of different orders and use the output information to select
#the model with the best fit.
m1<-arima(BJ2,order=c(1,0,0))
m2<-arima(BJ2,order=c(2,0,0))
m3<-arima(BJ2,order=c(3,0,0))
m4<-arima(BJ2,order=c(4,0,0))
m5<-arima(BJ2,order=c(0,0,1))
m6<-arima(BJ2,order=c(0,0,2))
m7<-arima(BJ2,order=c(1,0,1))
m8<-arima(BJ2,order=c(2,0,1))
m9<-arima(BJ2,order=c(3,0,1))
m10<-arima(BJ2,order=c(4,0,1))
m11<-arima(BJ2,order=c(1,0,2))
m12<-arima(BJ2,order=c(2,0,2))
m13<-arima(BJ2,order=c(3,0,2))
m14<-arima(BJ2,order=c(4,0,2))
sigma2<-c(m1$sigma2,m2$sigma2,m3$sigma2,m4$sigma2,m5$sigma2,m6$sigma2,m7$sigma2,m8$sigma2,m9$sigma2,m10$sigma2,m11$sigma2,m12$sigma2,m13$sigma2,m14$sigma2)
loglik<-c(m1$loglik,m2$loglik,m3$loglik,m4$loglik,m5$loglik,m6$loglik,m7$loglik,m8$loglik,m9$loglik,m10$loglik,m11$loglik,m12$loglik,m13$loglik,m14$loglik)
AIC<-c(m1$aic,m2$aic,m3$aic,m4$aic,m5$aic,m6$aic,m7$aic,m8$aic,m9$aic,m10$aic,m11$aic,m12$aic,m13$aic,m14$aic)
d <- data.frame(pq = c("(1,0)","(2,0)","(3,0)","(4,0)","(0,1)","(0,2)","(1,1)","(2,1)","(3,1)","(4,1)","(1,2)","(2,2)","(3,2)","(4,2)"),sigma2,loglik,AIC)
d
# Order this by sigma2
d[order(d$sigma2),]
# Order this by loglik
d[order(-d$loglik),]
# Order this by AIC
d[order(d$AIC),]
names(m1)
m1$coef
length(m1$coef)
length(m5$coef)
length(m11$coef)
ma
m5
m11
D <- -2*(m5$loglik - m11$loglik)
pval <- 1-pchisq(D,3)
print(c("Test Statistic:",D,"P-value:",pval))
pval <- 1-pchisq(D,2)
print(c("Test Statistic:",D,"P-value:",pval))
setwd("~/Documents/Module2/msan604/A2")
beer <- read.csv("beer.csv", header=T)
beer <- ts(beer, start = c(1956,1), frequency = 12)
plot(beer, main="Beer Production in Australia",
xlab="Year", ylab="Production (x1e6 L)")
# Take log-transform of the data
lbeer <- log(beer)
plot(lbeer, main="Beer Production in Australia",
xlab="Year", ylab="Log of Production (x1e6 L)")
# check whether ordinary and/or seasonal differencing is necessary
acf(lbeer, lag.max = 96) # fit seems necessary
# Both forms of differencing seem necessary. Let's do ordinary first:
par(mfrow=c(2,1))
dlbeer <- diff(lbeer)
plot(dlbeer, main="Trend corrected Beer Production in Australia",
xlab="Year", ylab="Log of Production (x1e6 L)")
acf(dlbeer, lag.max=48)
adf.test(dlbeer)
# Still need seasonal differencing:
dlbeer.12 <- diff(dlbeer, lag=12)
plot(dlbeer.12, main="Trend and Seasonality Corrected Beer Production in Australia",
xlab="Year", ylab="Log of Production (x1e6 L)")
acf(dlbeer.12, lag.max=48)
adf.test(dlbeer.12, k=12)
# This seems fine now. Since we seasonally differenced, we are fitting a SARIMA model
# and need to choose p, P, q, Q.
# Let's look at the ACF/PACF plots for this
par(mfrow=c(2,1))
acf(dlbeer.12, lag.max=48)
pacf(dlbeer.12, lag.max=48)
# p<=5, q<=4, P=0, Q=1
# Fit model
m <- arima(lbeer, c(5,1,4), list(order=c(0,1,1), period=12))
summary(m)
library(tseries)
library(forecast)
library(lawstat)
beer <- read.csv("beer.csv", header=T)
beer <- ts(beer, start = c(1956,1), frequency = 12)
plot(beer, main="Beer Production in Australia",
xlab="Year", ylab="Production (x1e6 L)")
# Take log-transform of the data
lbeer <- log(beer)
plot(lbeer, main="Beer Production in Australia",
xlab="Year", ylab="Log of Production (x1e6 L)")
# check whether ordinary and/or seasonal differencing is necessary
acf(lbeer, lag.max = 96) # fit seems necessary
# Both forms of differencing seem necessary. Let's do ordinary first:
par(mfrow=c(2,1))
dlbeer <- diff(lbeer)
plot(dlbeer, main="Trend corrected Beer Production in Australia",
xlab="Year", ylab="Log of Production (x1e6 L)")
acf(dlbeer, lag.max=48)
adf.test(dlbeer)
# Still need seasonal differencing:
dlbeer.12 <- diff(dlbeer, lag=12)
plot(dlbeer.12, main="Trend and Seasonality Corrected Beer Production in Australia",
xlab="Year", ylab="Log of Production (x1e6 L)")
acf(dlbeer.12, lag.max=48)
adf.test(dlbeer.12, k=12)
# This seems fine now. Since we seasonally differenced, we are fitting a SARIMA model
# and need to choose p, P, q, Q.
# Let's look at the ACF/PACF plots for this
par(mfrow=c(2,1))
acf(dlbeer.12, lag.max=48)
pacf(dlbeer.12, lag.max=48)
# p<=5, q<=4, P=0, Q=1
# Fit model
m <- arima(lbeer, c(5,1,4), list(order=c(0,1,1), period=12))
summary(m)
m0<-arima(lbeer, c(1,1,1), list(order=c(0,1,1), period=12))
m1<-arima(lbeer, c(1,1,2), list(order=c(0,1,1), period=12))
m2<-arima(lbeer, c(1,1,3), list(order=c(0,1,1), period=12))
m3<-arima(lbeer, c(1,1,4), list(order=c(0,1,1), period=12))
m4<-arima(lbeer, c(2,1,1), list(order=c(0,1,1), period=12))
m5<-arima(lbeer, c(2,1,2), list(order=c(0,1,1), period=12))
m6<-arima(lbeer, c(2,1,3), list(order=c(0,1,1), period=12))
m7<-arima(lbeer, c(2,1,4), list(order=c(0,1,1), period=12))
m8<-arima(lbeer, c(3,1,1), list(order=c(0,1,1), period=12))
m9<-arima(lbeer, c(3,1,2), list(order=c(0,1,1), period=12))
m10<-arima(lbeer, c(3,1,3), list(order=c(0,1,1), period=12))
m11<-arima(lbeer, c(3,1,4), list(order=c(0,1,1), period=12))
m12<-arima(lbeer, c(4,1,1), list(order=c(0,1,1), period=12))
m13<-arima(lbeer, c(4,1,2), list(order=c(0,1,1), period=12))
m14<-arima(lbeer, c(4,1,3), list(order=c(0,1,1), period=12))
m15<-arima(lbeer, c(4,1,4), list(order=c(0,1,1), period=12))
m16<-arima(lbeer, c(5,1,1), list(order=c(0,1,1), period=12))
m17<-arima(lbeer, c(5,1,2), list(order=c(0,1,1), period=12))
m18<-arima(lbeer, c(5,1,3), list(order=c(0,1,1), period=12))
m19<-arima(lbeer, c(5,1,4), list(order=c(0,1,1), period=12))
sigma2<-c(m0$sigma2,m1$sigma2,m2$sigma2,m3$sigma2,m4$sigma2,m5$sigma2,m6$sigma2,m7$sigma2,m8$sigma2,m9$sigma2,
m10$sigma2,m11$sigma2,m12$sigma2,m13$sigma2,m14$sigma2,m15$sigma2,m16$sigma2,m17$sigma2,m18$sigma2,m19$sigma2)
loglik<-c(m0$loglik,m1$loglik,m2$loglik,m3$loglik,m4$loglik,m5$loglik,m6$loglik,m7$loglik,m8$loglik,m9$loglik,
m10$loglik,m11$loglik,m12$loglik,m13$loglik,m14$loglik,m15$loglik,m16$loglik,m17$loglik,m18$loglik,m19$loglik)
AIC<-c(m0$aic,m1$aic,m2$aic,m3$aic,m4$aic,m5$aic,m6$aic,m7$aic,m8$aic,m9$aic,
m10$aic,m11$aic,m12$aic,m13$aic,m14$aic,m15$aic,m16$aic,m17$aic,m18$aic,m19$aic)
d <- data.frame(pq = c("(1,1,1)","(1,1,2)","(1,1,3)","(1,1,4)",
"(2,1,1)","(2,1,2)","(2,1,3)","(2,1,4)",
"(3,1,1)","(3,1,2)","(3,1,3)","(3,1,4)",
"(4,1,1)","(4,1,2)","(4,1,3)","(4,1,4)",
"(5,1,1)","(5,1,2)","(5,1,3)","(5,1,4)"),sigma2,loglik,AIC)
d
d <- data.frame(pdq = c("(1,1,1)","(1,1,2)","(1,1,3)","(1,1,4)",
"(2,1,1)","(2,1,2)","(2,1,3)","(2,1,4)",
"(3,1,1)","(3,1,2)","(3,1,3)","(3,1,4)",
"(4,1,1)","(4,1,2)","(4,1,3)","(4,1,4)",
"(5,1,1)","(5,1,2)","(5,1,3)","(5,1,4)"),sigma2,loglik,AIC)
d
d[order(d$sigma2),]
d[order(-d$loglik),]
d[order(d$AIC),]
d[order(d$sigma2),]
head(d[order(d$sigma2),])
head(d[order(-d$loglik),])
head(d[order(d$AIC),])
d[order(d$sigma2),1:5]
d[order(d$sigma2),][1:5,]
d[order(d$sigma2),][1:3,]
# Order this by loglik
d[order(-d$loglik),][1:3,]
D <- -2*(m19$loglik - m15$loglik)
pval <- 1-pchisq(D,2)
print(c("Test Statistic:",D,"P-value:",pval))
D <- -2*(m19$loglik - m11$loglik)
pval <- 1-pchisq(D,2)
print(c("Test Statistic:",D,"P-value:",pval))
D <- -2*(m19$loglik - m1$loglik)
pval <- 1-pchisq(D,2)
print(c("Test Statistic:",D,"P-value:",pval))
D <- -2*(m19$loglik - m0$loglik)
pval <- 1-pchisq(D,2)
print(c("Test Statistic:",D,"P-value:",pval))
D <- -2*(m15$loglik - m19$loglik)
pval <- 1-pchisq(D,2)
print(c("Test Statistic:",D,"P-value:",pval))
par(mfrow=c(2,1))
plot(LakeHuron, main="Height of Lake Huron Through the Years",
xlab = "Year", ylab = "Height (ft)")
acf(LakeHuron)
adf.test(LakeHuron)
# Difference once
LakeHuron1 <- diff(LakeHuron)
plot(LakeHuron1, main="Differenced Height of Lake Huron Through the Years",
xlab = "Year", ylab = "Height (ft)")
acf(LakeHuron1)
adf.test(LakeHuron1)
# optional
ndiffs(x=LakeHuron, test="adf", max.d=10)
# Fit AR(1) and AR(2) models
m1 <- arima(LakeHuron1, order = c(1,0,0))
summary(m1)
m2 <- arima(LakeHuron1, order = c(2,0,0))
summary(m2)
# Compare the two models using LRT
D <- -2*(m1$loglik - m2$loglik)
pval <- 1-pchisq(D,1)
print(c("Test Statistic:",round(D,4),"P-value:",round(pval,4)))
summary(m1)
summary(m2)
e <- m2$residuals # residuals
r <- e/sqrt(m2$sigma2) # standardized residuals
# Plot residuals vs t
par(mfrow=c(2,1))
plot(e, main="Residuals vs t", ylab="")
abline(h=0, col="red")
plot(r, main="Standardized Residuals vs t", ylab="")
abline(h=0, col="red")
# test whether residuals have zero mean
t.test(e)
# test for heteroscedasticity
par(mfrow=c(1,1))
plot(e, main="Residuals vs t", ylab="")
abline(v=c(1899,1923,1947), lwd=3, col="red")
group <- c(rep(1,24),rep(2,24),rep(3,24),rep(4,25))
levene.test(e,group) #Levene
bartlett.test(e,group) #Bartlett
# test for uncorrelatedness / randomness
tsdiag(m1)
# test for normality
par(mfrow=c(1,1))
qqnorm(e, main="QQ-plot of Residuals")
qqline(e, col = "red")
shapiro.test(e) #SW test
m0<-arima(lbeer, c(1,1,1), list(order=c(0,1,1), period=12))
m1<-arima(lbeer, c(1,1,2), list(order=c(0,1,1), period=12))
m2<-arima(lbeer, c(1,1,3), list(order=c(0,1,1), period=12))
m3<-arima(lbeer, c(1,1,4), list(order=c(0,1,1), period=12))
m4<-arima(lbeer, c(2,1,1), list(order=c(0,1,1), period=12))
m5<-arima(lbeer, c(2,1,2), list(order=c(0,1,1), period=12))
m6<-arima(lbeer, c(2,1,3), list(order=c(0,1,1), period=12))
m7<-arima(lbeer, c(2,1,4), list(order=c(0,1,1), period=12))
m8<-arima(lbeer, c(3,1,1), list(order=c(0,1,1), period=12))
m9<-arima(lbeer, c(3,1,2), list(order=c(0,1,1), period=12))
m10<-arima(lbeer, c(3,1,3), list(order=c(0,1,1), period=12))
m11<-arima(lbeer, c(3,1,4), list(order=c(0,1,1), period=12))
m12<-arima(lbeer, c(4,1,1), list(order=c(0,1,1), period=12))
m13<-arima(lbeer, c(4,1,2), list(order=c(0,1,1), period=12))
m14<-arima(lbeer, c(4,1,3), list(order=c(0,1,1), period=12))
m15<-arima(lbeer, c(4,1,4), list(order=c(0,1,1), period=12))
m16<-arima(lbeer, c(5,1,1), list(order=c(0,1,1), period=12))
m17<-arima(lbeer, c(5,1,2), list(order=c(0,1,1), period=12))
m18<-arima(lbeer, c(5,1,3), list(order=c(0,1,1), period=12))
m19<-arima(lbeer, c(5,1,4), list(order=c(0,1,1), period=12))
sigma2<-c(m0$sigma2,m1$sigma2,m2$sigma2,m3$sigma2,m4$sigma2,m5$sigma2,m6$sigma2,m7$sigma2,
m8$sigma2,m9$sigma2,m10$sigma2,m11$sigma2,m12$sigma2,m13$sigma2,m14$sigma2,
m15$sigma2,m16$sigma2,m17$sigma2,m18$sigma2,m19$sigma2)
loglik<-c(m0$loglik,m1$loglik,m2$loglik,m3$loglik,m4$loglik,m5$loglik,m6$loglik,m7$loglik,
m8$loglik,m9$loglik,m10$loglik,m11$loglik,m12$loglik,m13$loglik,m14$loglik,
m15$loglik,m16$loglik,m17$loglik,m18$loglik,m19$loglik)
AIC<-c(m0$aic,m1$aic,m2$aic,m3$aic,m4$aic,m5$aic,m6$aic,m7$aic,m8$aic,m9$aic,
m10$aic,m11$aic,m12$aic,m13$aic,m14$aic,m15$aic,m16$aic,m17$aic,m18$aic,m19$aic)
d <- data.frame(pdq = c("(1,1,1)","(1,1,2)","(1,1,3)","(1,1,4)",
"(2,1,1)","(2,1,2)","(2,1,3)","(2,1,4)",
"(3,1,1)","(3,1,2)","(3,1,3)","(3,1,4)",
"(4,1,1)","(4,1,2)","(4,1,3)","(4,1,4)",
"(5,1,1)","(5,1,2)","(5,1,3)","(5,1,4)"),sigma2,loglik,AIC)
D <- -2*(m15$loglik - m19$loglik)
pval <- 1-pchisq(D,2)
print(c("Test Statistic:",D,"P-value:",pval))
D <- -2*(m11$loglik - m15$loglik)
pval <- 1-pchisq(D,2)
print(c("Test Statistic:",D,"P-value:",pval)) #choose m15
d[order(d$sigma2),][1:4,]
# Order this by loglik
d[order(-d$loglik),][1:4,]
# Order this by AIC
d[order(d$AIC),][1:4,]
e <- m11$residuals # residuals
r <- e/sqrt(m11$sigma2) # standardized residuals
par(mfrow=c(2,1))
plot(e, main="Residuals vs t", ylab="")
abline(h=0, col="red")
plot(r, main="Standardized Residuals vs t", ylab="")
abline(h=0, col="red")
# test whether residuals have zero mean
t.test(e)
# test for heteroscedasticity
par(mfrow=c(1,1))
plot(e, main="Residuals vs t", ylab="")
abline(v=c(1966,1976,1986), lwd=3, col="red")
group <- c(rep(1,119),rep(2,119),rep(3,119),rep(4,119))
levene.test(e,group) #Levene
bartlett.test(e,group) #Bartlett
# test for uncorrelatedness / randomness
tsdiag(m)
# test for normality
par(mfrow=c(1,1))
qqnorm(e, main="QQ-plot of Residuals")
qqline(e, col = "red")
shapiro.test(e) #SW test
# Histogram
hist(e, freq = F, xlim = c(-.4,.4), main = "Histogram of residuals")
curve(dnorm(x, mean(e), sd(e)), col="darkblue", lwd=1, add=TRUE, yaxt="n")
legend("topright", legend=c("N(-0.001, 0.004)"), lty = c(1), lwd=c(1),
col=c("darkblue"))
d[order(d$sigma2),][1:4,]
# Likelihood Ratio Tests
D <- -2*(m15$loglik - m19$loglik)
pval <- 1-pchisq(D,2)
print(c("Test Statistic:",D,"P-value:",pval)) #choose m15
D <- -2*(m11$loglik - m15$loglik)
pval <- 1-pchisq(D,2)
print(c("Test Statistic:",D,"P-value:",pval)) #choose m11
# Cannot compare m11 to m14 because they have the same number of parameters
D <- -2*(m7$loglik - m11$loglik)
pval <- 1-pchisq(D,2)
print(c("Test Statistic:",D,"P-value:",pval)) #choose m11
m <- arima(lbeer, c(3,1,4), list(order=c(0,1,1), period=12))
summary(m)
# Let's visualize how well this model fits
f <- lbeer - m$residuals # fitted values
par(mfrow=c(1,1))
plot(beer, main="Beer Production in Australia",
xlab="Year", ylab="Production (x1e6 L)")
lines(exp(f), col="red")
legend("bottomright", legend = c("Observed", "Predicted"),
lty = 1, col = c("black", "red"))
# Residual diagnostics
e <- m$residuals # residuals
r <- e/sqrt(m$sigma2) # standardized residuals
# Plot residuals vs t
par(mfrow=c(2,1))
plot(e, main="Residuals vs t", ylab="")
abline(h=0, col="red")
plot(r, main="Standardized Residuals vs t", ylab="")
abline(h=0, col="red")
# test whether residuals have zero mean
t.test(e)
# test for heteroscedasticity
par(mfrow=c(1,1))
plot(e, main="Residuals vs t", ylab="")
abline(v=c(1966,1976,1986), lwd=3, col="red")
group <- c(rep(1,119),rep(2,119),rep(3,119),rep(4,119))
levene.test(e,group) #Levene
bartlett.test(e,group) #Bartlett
# test for uncorrelatedness / randomness
tsdiag(m)
# test for normality
par(mfrow=c(1,1))
qqnorm(e, main="QQ-plot of Residuals")
qqline(e, col = "red")
shapiro.test(e) #SW test
# Histogram
hist(e, freq = F, xlim = c(-.4,.4), main = "Histogram of residuals")
curve(dnorm(x, mean(e), sd(e)), col="darkblue", lwd=1, add=TRUE, yaxt="n")
legend("topright", legend=c("N(-0.001, 0.004)"), lty = c(1), lwd=c(1),
col=c("darkblue"))
summary(m)
